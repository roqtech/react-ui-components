import React, { ReactNode } from 'react';
import { TypeToggleGroup } from 'src/components/ToggleGroup';
import { QueryObserverResult } from 'react-query';
import { notificationsInAppForCurrentUser, notificationsInAppForCurrentUser_notificationsInAppForCurrentUser_data } from 'src/lib/graphql/types';
import { IRoqProvider } from 'src/components/Provider';
import type { StyledCardPropsType } from 'src/components/Card';
import type { ClassValue } from 'clsx';
export declare type NotificationType = 'all' | 'unread';
declare type ContentViewCallbackProps = {
    data: notificationsInAppForCurrentUser_notificationsInAppForCurrentUser_data;
    onRead: () => Promise<Record<string, any>>;
    onUnRead: () => Promise<Record<string, any>>;
    refetch: () => Promise<Record<string, any>>;
};
declare type NotificationChildrenCallbackProps = QueryObserverResult<notificationsInAppForCurrentUser> & NotificationTypeToggleCallbackProps;
declare type NotificationTypeToggleCallbackProps = {
    type: NotificationType;
    setType: React.Dispatch<React.SetStateAction<NotificationType>>;
};
interface NotificationProps extends Partial<IRoqProvider> {
    type?: NotificationType;
    children?: (callback: NotificationChildrenCallbackProps) => JSX.Element;
    loadingView?: (callback: QueryObserverResult<notificationsInAppForCurrentUser>) => JSX.Element;
    contentView?: (callback: ContentViewCallbackProps) => JSX.Element;
    contentCardProps?: React.ComponentProps<StyledCardPropsType>;
    titleProps?: {
        children?: (callback: NotificationTitleChildrenCallbackProps) => JSX.Element;
        title?: ReactNode;
        count?: number;
        css?: React.ComponentProps<typeof StyledNotificationTitle>['css'];
        className?: ClassValue;
    };
    typeToggleProps?: {
        children?: (callback: NotificationTypeToggleCallbackProps) => JSX.Element;
        css?: React.ComponentProps<TypeToggleGroup>['css'];
        className?: ClassValue;
    };
}
declare const StyledNotification: import("@stitches/react/types/styled-component").StyledComponent<"div", {}, {}, import("@stitches/react/types/css-util").CSS<{}, {
    colors: {
        green1: string;
        green2: string;
        green3: string;
        green4: string;
        green5: string;
        green6: string;
        green7: string;
        green8: string;
        green9: string;
        green10: string;
        green11: string;
        green12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        blue1: string;
        blue2: string;
        blue3: string;
        blue4: string;
        blue5: string;
        blue6: string;
        blue7: string;
        blue8: string;
        blue9: string;
        blue10: string;
        blue11: string;
        blue12: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
    };
    fonts: {
        main: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>;
export declare const Notification: React.FC<React.ComponentProps<typeof StyledNotification> & NotificationProps>;
declare const StyledNotificationTitle: import("@stitches/react/types/styled-component").StyledComponent<"div", {}, {}, import("@stitches/react/types/css-util").CSS<{}, {
    colors: {
        green1: string;
        green2: string;
        green3: string;
        green4: string;
        green5: string;
        green6: string;
        green7: string;
        green8: string;
        green9: string;
        green10: string;
        green11: string;
        green12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        blue1: string;
        blue2: string;
        blue3: string;
        blue4: string;
        blue5: string;
        blue6: string;
        blue7: string;
        blue8: string;
        blue9: string;
        blue10: string;
        blue11: string;
        blue12: string;
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
    };
    fonts: {
        main: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {}>>;
interface NotificationTitleChildrenCallbackProps {
    count: number;
    loading: boolean;
}
export {};
