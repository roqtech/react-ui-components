/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  query notificationsInAppForCurrentUser(\n    $limit: Int\n    $order: NotificationInAppOrderArgType!\n    $notificationfilter: NotificationInAppFilterArgType\n    $unreadCountFilter: NotificationInAppFilterArgType\n  ) {\n    loadNotifications: notificationsInAppForCurrentUser(\n      limit: $limit\n      order: $order\n      filter: $notificationfilter\n    ) {\n      totalCount\n      data {\n        id\n        title\n        content\n        locale\n        createdAt\n        read\n        icon\n      }\n    }\n    loadUnreadNotificationCount: notificationsInAppForCurrentUser(\n      limit: $limit\n      filter: $unreadCountFilter\n    ) {\n      totalCount\n    }\n  }\n": types.NotificationsInAppForCurrentUserDocument,
    "\n  mutation MarkAsReadNotification($id: ID!) {\n    markAsReadNotification(id: $id) {\n      id\n      read\n    }\n  }\n": types.MarkAsReadNotificationDocument,
    "\n  mutation MarkAsUnreadNotification($id: ID!) {\n    markAsUnreadNotification(id: $id) {\n      id\n      read\n    }\n  }\n": types.MarkAsUnreadNotificationDocument,
    "\n  query NotificationTypeCategories {\n    notificationTypeCategories {\n      data {\n        id\n        key\n        description\n        notificationTypes {\n          data {\n            id\n            key\n            description\n            defaultUserActiveWeb\n            defaultUserActiveMail\n            notificationTypeUserPreferences {\n              data {\n                id\n                key\n                web\n                mail\n                userId\n                notificationTypeId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.NotificationTypeCategoriesDocument,
    "\n  mutation UpsertNotificationTypeUserPreference(\n    $web: Boolean!\n    $mail: Boolean!\n    $notificationTypeId: ID!\n    $id: ID\n  ) {\n    upsertNotificationTypeUserPreference(\n      notificationTypeUserPreference: {\n        id: $id\n        web: $web\n        mail: $mail\n        notificationTypeId: $notificationTypeId\n      }\n    ) {\n      id\n      web\n      mail\n      key\n      userId\n      notificationTypeId\n    }\n  }\n": types.UpsertNotificationTypeUserPreferenceDocument,
};

export function graphql(source: "\n  query notificationsInAppForCurrentUser(\n    $limit: Int\n    $order: NotificationInAppOrderArgType!\n    $notificationfilter: NotificationInAppFilterArgType\n    $unreadCountFilter: NotificationInAppFilterArgType\n  ) {\n    loadNotifications: notificationsInAppForCurrentUser(\n      limit: $limit\n      order: $order\n      filter: $notificationfilter\n    ) {\n      totalCount\n      data {\n        id\n        title\n        content\n        locale\n        createdAt\n        read\n        icon\n      }\n    }\n    loadUnreadNotificationCount: notificationsInAppForCurrentUser(\n      limit: $limit\n      filter: $unreadCountFilter\n    ) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query notificationsInAppForCurrentUser(\n    $limit: Int\n    $order: NotificationInAppOrderArgType!\n    $notificationfilter: NotificationInAppFilterArgType\n    $unreadCountFilter: NotificationInAppFilterArgType\n  ) {\n    loadNotifications: notificationsInAppForCurrentUser(\n      limit: $limit\n      order: $order\n      filter: $notificationfilter\n    ) {\n      totalCount\n      data {\n        id\n        title\n        content\n        locale\n        createdAt\n        read\n        icon\n      }\n    }\n    loadUnreadNotificationCount: notificationsInAppForCurrentUser(\n      limit: $limit\n      filter: $unreadCountFilter\n    ) {\n      totalCount\n    }\n  }\n"];
export function graphql(source: "\n  mutation MarkAsReadNotification($id: ID!) {\n    markAsReadNotification(id: $id) {\n      id\n      read\n    }\n  }\n"): (typeof documents)["\n  mutation MarkAsReadNotification($id: ID!) {\n    markAsReadNotification(id: $id) {\n      id\n      read\n    }\n  }\n"];
export function graphql(source: "\n  mutation MarkAsUnreadNotification($id: ID!) {\n    markAsUnreadNotification(id: $id) {\n      id\n      read\n    }\n  }\n"): (typeof documents)["\n  mutation MarkAsUnreadNotification($id: ID!) {\n    markAsUnreadNotification(id: $id) {\n      id\n      read\n    }\n  }\n"];
export function graphql(source: "\n  query NotificationTypeCategories {\n    notificationTypeCategories {\n      data {\n        id\n        key\n        description\n        notificationTypes {\n          data {\n            id\n            key\n            description\n            defaultUserActiveWeb\n            defaultUserActiveMail\n            notificationTypeUserPreferences {\n              data {\n                id\n                key\n                web\n                mail\n                userId\n                notificationTypeId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query NotificationTypeCategories {\n    notificationTypeCategories {\n      data {\n        id\n        key\n        description\n        notificationTypes {\n          data {\n            id\n            key\n            description\n            defaultUserActiveWeb\n            defaultUserActiveMail\n            notificationTypeUserPreferences {\n              data {\n                id\n                key\n                web\n                mail\n                userId\n                notificationTypeId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation UpsertNotificationTypeUserPreference(\n    $web: Boolean!\n    $mail: Boolean!\n    $notificationTypeId: ID!\n    $id: ID\n  ) {\n    upsertNotificationTypeUserPreference(\n      notificationTypeUserPreference: {\n        id: $id\n        web: $web\n        mail: $mail\n        notificationTypeId: $notificationTypeId\n      }\n    ) {\n      id\n      web\n      mail\n      key\n      userId\n      notificationTypeId\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertNotificationTypeUserPreference(\n    $web: Boolean!\n    $mail: Boolean!\n    $notificationTypeId: ID!\n    $id: ID\n  ) {\n    upsertNotificationTypeUserPreference(\n      notificationTypeUserPreference: {\n        id: $id\n        web: $web\n        mail: $mail\n        notificationTypeId: $notificationTypeId\n      }\n    ) {\n      id\n      web\n      mail\n      key\n      userId\n      notificationTypeId\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;