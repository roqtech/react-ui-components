/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n    mutation DeleteFiles($ids: [ID!]!) {\n        deleteFiles(filter: { id: { valueIn: $ids } })\n    }\n": types.DeleteFilesDocument,
    "\n    mutation UpdateFile($id: ID!, $updateFileDto: FileUpdateDto!) {\n        updateFile(fileId: $id, updateFileDto: $updateFileDto) {\n            id\n            name\n        }\n    }\n": types.UpdateFileDocument,
    "\n    mutation MakeFilePublic($id: ID!) {\n        makeFilePublic(fileId: $id) {\n            id\n            url\n            isPublic\n        }\n    }\n": types.MakeFilePublicDocument,
    "\n    mutation MakeFilePrivate($id: ID!) {\n        makeFilePrivate(fileId: $id) {\n            id\n            url\n            isPublic\n        }\n    }\n": types.MakeFilePrivateDocument,
    "\n    mutation UpdateFileStatus($fileId: ID!, $status: FileStatusEnum!) {\n        updateFileStatus(fileId: $fileId, status: $status) {\n            id\n            name\n            url\n            createdAt\n        }\n    }\n": types.UpdateFileStatusDocument,
    "\n    query File($fileId: ID!) {\n        file(fileId: $fileId) {\n            id\n            name\n            url\n            isPublic\n        }\n    }\n": types.FileDocument,
    "\n    query Files($limit: Int, $offset: Int, $order: FileOrderArgType, $filter: FileFilterArgType!) {\n        files(limit: $limit, offset: $offset, order: $order, filter: $filter) {\n            totalCount\n            data {\n                id\n                name\n                url\n                isPublic\n                createdAt\n                status\n            }\n        }\n    }\n": types.FilesDocument,
    "\n  query notificationsFeed {\n    notificationFeed {\n      data{\n        id\n        channel\n        content\n        seen\n        channel\n        lastSeenDate\n        title\n        createdAt\n      }\n      totalCount\n    }\n  }\n": types.NotificationsFeedDocument,
};

export function graphql(source: "\n    mutation DeleteFiles($ids: [ID!]!) {\n        deleteFiles(filter: { id: { valueIn: $ids } })\n    }\n"): (typeof documents)["\n    mutation DeleteFiles($ids: [ID!]!) {\n        deleteFiles(filter: { id: { valueIn: $ids } })\n    }\n"];
export function graphql(source: "\n    mutation UpdateFile($id: ID!, $updateFileDto: FileUpdateDto!) {\n        updateFile(fileId: $id, updateFileDto: $updateFileDto) {\n            id\n            name\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateFile($id: ID!, $updateFileDto: FileUpdateDto!) {\n        updateFile(fileId: $id, updateFileDto: $updateFileDto) {\n            id\n            name\n        }\n    }\n"];
export function graphql(source: "\n    mutation MakeFilePublic($id: ID!) {\n        makeFilePublic(fileId: $id) {\n            id\n            url\n            isPublic\n        }\n    }\n"): (typeof documents)["\n    mutation MakeFilePublic($id: ID!) {\n        makeFilePublic(fileId: $id) {\n            id\n            url\n            isPublic\n        }\n    }\n"];
export function graphql(source: "\n    mutation MakeFilePrivate($id: ID!) {\n        makeFilePrivate(fileId: $id) {\n            id\n            url\n            isPublic\n        }\n    }\n"): (typeof documents)["\n    mutation MakeFilePrivate($id: ID!) {\n        makeFilePrivate(fileId: $id) {\n            id\n            url\n            isPublic\n        }\n    }\n"];
export function graphql(source: "\n    mutation UpdateFileStatus($fileId: ID!, $status: FileStatusEnum!) {\n        updateFileStatus(fileId: $fileId, status: $status) {\n            id\n            name\n            url\n            createdAt\n        }\n    }\n"): (typeof documents)["\n    mutation UpdateFileStatus($fileId: ID!, $status: FileStatusEnum!) {\n        updateFileStatus(fileId: $fileId, status: $status) {\n            id\n            name\n            url\n            createdAt\n        }\n    }\n"];
export function graphql(source: "\n    query File($fileId: ID!) {\n        file(fileId: $fileId) {\n            id\n            name\n            url\n            isPublic\n        }\n    }\n"): (typeof documents)["\n    query File($fileId: ID!) {\n        file(fileId: $fileId) {\n            id\n            name\n            url\n            isPublic\n        }\n    }\n"];
export function graphql(source: "\n    query Files($limit: Int, $offset: Int, $order: FileOrderArgType, $filter: FileFilterArgType!) {\n        files(limit: $limit, offset: $offset, order: $order, filter: $filter) {\n            totalCount\n            data {\n                id\n                name\n                url\n                isPublic\n                createdAt\n                status\n            }\n        }\n    }\n"): (typeof documents)["\n    query Files($limit: Int, $offset: Int, $order: FileOrderArgType, $filter: FileFilterArgType!) {\n        files(limit: $limit, offset: $offset, order: $order, filter: $filter) {\n            totalCount\n            data {\n                id\n                name\n                url\n                isPublic\n                createdAt\n                status\n            }\n        }\n    }\n"];
export function graphql(source: "\n  query notificationsFeed {\n    notificationFeed {\n      data{\n        id\n        channel\n        content\n        seen\n        channel\n        lastSeenDate\n        title\n        createdAt\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query notificationsFeed {\n    notificationFeed {\n      data{\n        id\n        channel\n        content\n        seen\n        channel\n        lastSeenDate\n        title\n        createdAt\n      }\n      totalCount\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;